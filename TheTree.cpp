#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;


class TheTree {
public:
	vector<int> adj[120];
	int maximumDiameter(vector <int> cnt) {
		for(int i = 0 ; i<cnt.size() ;i++)
		cnt[i]= (cnt[i]>=2 ? 2 : 1);
		int current1=0,current2=-1;
		for(int i = 0 ; i < cnt.size() ;i++){
			if(cnt[i]==2){
				if(current2!=-1){
					adj[current1].push_back(current1+1);
					adj[current1+1].push_back(current1);
					adj[current2].push_back(current1+2);
					adj[current1+2].push_back(current2);
					current1=current1+2;
					current2=current1-1;
				}
				else{
					adj[current1].push_back(current1+1);
					adj[current1].push_back(current1+2);
					adj[current1+1].push_back(current1);
					adj[current1+2].push_back(current1);
					current1=current1+2;
					current2=current1-1;	
				}
			}
			else{
				current2=-1;
				adj[current1].push_back(current1+1);
				adj[current1+1].push_back(current1);
				current1=current1+1;				
			}
			cout<<current1<<" "<<current2<<endl;
		}
		return bfs(current1);
	}
	
	int bfs(int src){
		queue<int> q;
		q.push(src);
		int dist[120];
		memset(dist,-1,sizeof(dist));
		dist[src]=0;
		int maxdist=0;
		while(!q.empty()){
			int x = q.front(); q.pop();
			for(int i = 0 ; i<adj[x].size() ; i++){
				int y = adj[x][i];
				if(dist[y]==-1){
					dist[y]=dist[x]+1;
					if(dist[y]>maxdist)
					maxdist=dist[y];
					q.push(y);
				}
			}
		}
		return maxdist;	
	}
	
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheTree *obj;
	int answer;
	obj = new TheTree();
	clock_t startTime = clock();
	answer = obj->maximumDiameter(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,1,2,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {4,2,1,3,2,5,7,2,4,5,2,3,1,13,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 21;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
