#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>
#define A 0
#define B 1

using namespace std;


class TaroFillingAStringDiv2 {
public:
	int dp[52][2];
	string S;
	int getNumber(string S) {
		this->S=S;
		memset(dp,-1,sizeof(dp));
		int ans=9999999;
		if(S[0]=='?'){
			ans = min(calculate(1,A),calculate(1,B));
		}
		else{
			if(S[0]=='A')
			ans=calculate(1,A);
			else
			ans=calculate(1,B);
		}
		return ans;
	}
	
	int calculate(int index,int lastletter){
		if(index==S.size())
		return 0;
		
		if(dp[index][lastletter]!=-1)
		return dp[index][lastletter];
		
		int ans=99999;
		
		if(S[index]=='?'){
			if(lastletter==0)
			ans=min(ans,calculate(index+1,A)+1);
			else
			ans=min(ans,calculate(index+1,A));
			
			if(lastletter==1)
			ans=min(ans,calculate(index+1,B)+1);
			else
			ans=min(ans,calculate(index+1,B));
		}
		else{
			if(S[index]=='A' && lastletter==A)
			ans=min(ans,calculate(index+1,A)+1);
			else if(S[index]=='A')
			ans=min(ans,calculate(index+1,A));
			else if(S[index]=='B' && lastletter==B)
			ans=min(ans,calculate(index+1,B)+1);
			else
			ans=min(ans,calculate(index+1,B));
		}
		return dp[index][lastletter]=ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	TaroFillingAStringDiv2 *obj;
	int answer;
	obj = new TaroFillingAStringDiv2();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "ABAA";
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "?" "?";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "A?A";
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "A?" "?B?" "?" "?AAB?A?" "?" "?A";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "?BB?BAAB?" "?" "?BAB?B?AAAA?ABBA?" "?" "?" "?A?AAB?BBA?A?";
	p1 = 10;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
