#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class RepeatString {
public:
	
	string s1,s2;
	int n,m;
	int dp[50][50];		
	
	int minimalModify(string s) {
		int x=s.size();
		if(x==1)
		return 1;
		
		int ans = 999999;
		for(int i = 0 ; i<=x-1 ; i++){
			s1 = s.substr(0,i);
			s2 = s.substr(i,x-i);
			m=s1.size(); n = s2.size();
			ans=min(calculate(),ans);
		}
		return ans;
	}
	
	int calculate(){
		for(int i = m ; i>=0 ; i--){
			for(int j = n ; j>=0 ; j--){
				if(i==m && j==n)
				dp[i][j]=0;
				else if(i==m)
				dp[i][j]=n-j;
				else if(j==n)
				dp[i][j]=m-i;
				else{
					dp[i][j]=99999;
					if(s1[i]==s2[j])
						dp[i][j]=min(dp[i][j],dp[i+1][j+1]);
					else
						dp[i][j]=min(dp[i][j],1+dp[i+1][j+1]);
					dp[i][j]=min(dp[i][j],1+dp[i+1][j]);
					dp[i][j]=min(dp[i][j],1+dp[i][j+1]);
				}
			}
		}
		return dp[0][0];		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	RepeatString *obj;
	int answer;
	obj = new RepeatString();
	clock_t startTime = clock();
	answer = obj->minimalModify(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "aba";
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "adam";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "x";
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "aaabbbaaaccc";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "repeatstring";
	p1 = 6;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "ffkcgdlfjwapbaahmgjadqefdbhaajjjaipnblmdi";
	p1 = 17;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
