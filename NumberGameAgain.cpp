#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class NumberGameAgain {
public:
	long long solve(int k, vector <long long> table) {
		sort(table.begin(),table.end());
		long long int  sol = pow(2,k)-2;
		cout<<sol<<endl;
		vector<bool> used(table.size(),false);
		
		for(int i = 0 ; i< table.size() ; i++){
			if(!used[i])
			for(int j = i+1 ; j<table.size() ; j++){
				if(isreachable(table[i],table[j]))
				{
					used[j]=true;
				}
			}
		}
		
		for(int i = 0 ; i <table.size() ; i++){
			if(!used[i]){
				int  l = (int)  (log10(table[i]) / log10(2));
				sol-=pow(2,k-l)-1;
			}
		}
		return sol;	
	}
	
	bool isreachable(long long int x,long long int y){
		while(y>x){
			y=y>>1L;
		}
		return y==x;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <long long> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	NumberGameAgain *obj;
	long long answer;
	obj = new NumberGameAgain();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <long long> p1;
	long long p2;
	
{
	// ----- test 3 -----
	p0 = 40;
	long long t1[] = {2ll,4ll,8ll,16ll,32141531ll,2324577ll,1099511627775ll,2222222222ll,33333333333ll,4444444444ll,2135ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 549755748288ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
