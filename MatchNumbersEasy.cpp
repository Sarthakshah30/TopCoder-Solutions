#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MatchNumbersEasy {
public:

	string maxNumber(vector <int> matches, int n) {
		
		string nums[]={"0","1","2","3","4","5","6","7","8","9"};
		map<int,string> m;
		int min=99999;
		m[0]="";
		
		for(int i = 0 ; i<matches.size();i++)
		if(matches[i]<min)
		min=matches[i];
		
		for(int i = 1 ; i<= n ;i++){
			string max="";
			if(i<min){
				m[i]=max;
				continue;
			}
			for(int j = 0 ;j<matches.size() ;j++){
				string temp="";
				if(i>=matches[j])
				{
					temp=nums[j]+m[i-matches[j]];
					sort(temp.rbegin(),temp.rend());
					if(max=="")
					max=temp;
					else if(max.size()==temp.size()){
						if(max.compare(temp)<0)
						max=temp;
					}
					else if(max.size() > temp.size()){
						string x(max.size()-temp.size(),'0');
						x+=temp;
						if(max.compare(x)<=0)
						max=temp;
					}
					else{
						string x(temp.size()-max.size(),'0');
						x+=max;
						if(x.compare(temp)<=0)
						max=temp;						
					}
				}
			}
			m[i]=max;
		}
		int count=0;
		for(int i = 0 ; i<m[n].size() ;i++){
			if(m[n][i]=='0')
			count++;
		}
		if(count==m[n].size())
		return "0";
		else
		return m[n];		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	MatchNumbersEasy *obj;
	string answer;
	obj = new MatchNumbersEasy();
	clock_t startTime = clock();
	answer = obj->maxNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	string p2;
	
	{
	// ----- test 2 -----
	int t0[] = {1,5,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = "0";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
