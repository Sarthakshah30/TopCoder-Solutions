#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
#define MOD 1000000007

using namespace std;


class NoRepeatPlaylist {
public:
	int dp[101][101];
	
	int numPlaylists(int N, int M, int P) {
		memset(dp,-1,sizeof(dp));
		return calculate(1,N,P,M,N);
	}
	
	int calculate(int index,int unused,int length,int gap,int total){
		if(index==length+1 && unused==0)
			return 1;
		
		if(unused!=0 && index==length+1)
		return 0;
		
		if(dp[index][unused]!=-1)
		return dp[index][unused];
		int sum=0;
		
		if(index>gap+1){
			if(unused==total){
				for(int i = 1 ; i<=unused ; i++)
					sum=(sum+calculate(index+1,unused-1,length,gap,total))%MOD;
			}
			else{
				for(int i = 1 ; i<=unused ; i++)
					sum=(sum+calculate(index+1,unused-1,length,gap,total))%MOD;
				for(int i = 1 ; i<=total-unused-gap ; i++)
					sum=(sum+calculate(index+1,unused,length,gap,total))%MOD;						
			}
		}
		else{
			for(int i = 1 ; i<=unused ; i++)
				sum=(sum+calculate(index+1,unused-1,length,gap,total))%MOD;
		}
		return dp[index][unused]=sum;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	NoRepeatPlaylist *obj;
	int answer;
	obj = new NoRepeatPlaylist();
	clock_t startTime = clock();
	answer = obj->numPlaylists(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 0;
	p2 = 3;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 3;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 0;
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 0;
	p2 = 4;
	p3 = 24;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2;
	p1 = 1;
	p2 = 4;
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 50;
	p1 = 5;
	p2 = 100;
	p3 = 222288991;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
