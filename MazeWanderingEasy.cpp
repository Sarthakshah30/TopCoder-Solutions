#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class MazeWanderingEasy {
public:
	int decisions(vector <string> maze) {
	
			int startX,startY,row,col,x,y,p,q,dec;
			queue<int> que;
			int decision[52][52];
			int dx[]={-1,1,0,0};
			int dy[]={0,0,-1,1};
			
		memset(decision,-1,sizeof(decision));
		row=maze.size();
		col=maze[0].size();
		
		for(int i = 0 ; i<row ; i++)
		for(int j = 0 ; j<col ; j++)
		if(maze[i][j]=='M'){
			startX=i;
			startY=j;
			break;
		}
		
		que.push(startX); que.push(startY); 
		decision[startX][startY]=0;
		while(!que.empty()){
			x=que.front(); que.pop();
			y=que.front(); que.pop();
			if(maze[x][y]=='*')
			return decision[x][y];
			vector<int> counter;
			for(int i= 0 ;i<4 ; i++){
				p=x+dx[i];
				q=y+dy[i];
				if(p>=0 && p<row && q>=0 && q<col && decision[p][q]==-1 && ( maze[p][q]=='.'||maze[p][q]=='*'))
				counter.push_back(i);
			}
			if(counter.size()>1)
			dec=1;
			else
			dec=0;
			for(int i = 0 ; i<counter.size() ;i++){
				p=x+dx[counter[i]];
				q=y+dy[counter[i]];
				que.push(p);
				que.push(q);
				decision[p][q]=dec+decision[x][y];
			}
		}
		return -1;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MazeWanderingEasy *obj;
	int answer;
	obj = new MazeWanderingEasy();
	clock_t startTime = clock();
	answer = obj->decisions(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"*.M"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"*.M",".X."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...","XMX","..*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".X.X......X",".X*.X.XXX.X",".XX.X.XM...","......XXXX."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"..........*",".XXXXXXXXXX","...........","XXXXXXXXXX.","M.........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
