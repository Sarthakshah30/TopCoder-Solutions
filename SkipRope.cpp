#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SkipRope {
public:
	vector <int> partners(vector <int> can, int ht) {
		
		int minDiff = 9999, minDiff2 = 9999;
		int num1,num2;
		
		num1 = 0;
		minDiff=abs(can[0]-ht);
		
		for(int i = 1 ; i < can.size() ; i++){
			
			int temp = abs(can[i]-ht);
			if(temp > minDiff)
			continue;
			if(temp == minDiff){
				if(can[num1]<can[i]){
					num1=i;
				}
				continue;
			}
			if( temp < minDiff){
				minDiff=temp;
				num1=i;
			}
		}
		
		if(num1==0){
			num2=1;
			minDiff2 = abs(can[1]-ht);
		}
		else{
			num2=0;
			minDiff2 = abs(can[0]-ht);
		}
		
		
		for(int i = 0 ; i < can.size() ; i++){
			int temp = abs(can[i]-ht);
			if(i==num1 || temp > minDiff2)
			continue;
			if(temp == minDiff2){
				if(can[num2]<can[i]){
					num2=i;
				}
				continue;
			}
			if( temp < minDiff2){
				minDiff2=temp;
				num2=i;
			}			
		}
		
		vector<int> xd;
		xd.push_back(can[num1]);
		xd.push_back(can[num2]);
		sort(xd.begin(),xd.end());
		return xd;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	SkipRope *obj;
	vector <int> answer;
	obj = new SkipRope();
	clock_t startTime = clock();
	answer = obj->partners(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {102,99,104};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	int t2[] = {99,102};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {102,97,104};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	int t2[] = {97,102};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {101,100,99};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	int t2[] = {100,101};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {75,117,170,175,168,167,167,142,170,85,89,170};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 169;
	int t2[] = {170,170};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {134,79,164,86,131,78,99,150,105,163,150,110,90,137,127,130,121,93,97,131,170,137,171,153,137,138,92,103,149,110,156};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 82;
	int t2[] = {79,86};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
