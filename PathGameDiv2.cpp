#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include<cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PathGameDiv2 {
public:
	vector<string> board;
	int lastIndex;
	int calc(vector <string> board) {
		this->board = board;
		if(board[0].size()==1){
			if(board[0][0]==board[1][0])
			return 1;
			return 0;
		}
		lastIndex=board[0].size()-1;
		int black=0;
		for(int i = 0 ; i <board[0].size() ;i++){
			if(board[0][i]=='#')
			black++;
			if(board[1][i]=='#')
			black++;
		}
		int local1=0,local2=0;
		if(board[0][0]=='.')
			local1=(2*board[0].size()-black-1)-dobfs(0,0);
		if(board[1][0]=='.')
			local2=(2*board[0].size()-black-1)-dobfs(1,0);
			
		return local1> local2 ? local1 : local2;				
	}
	
	int dobfs(int x,int y){
		int dist[2][board[0].size()];
		queue<int> q;
		memset(dist,-1,sizeof(dist));
		dist[x][y]=0;
		q.push(x);
		q.push(y);
		while(!q.empty()){
			int a = q.front(); q.pop();
			int b = q.front(); q.pop();
			if(b==board[0].size()-1)
			return dist[a][b];
			if(b+1 < board[0].size() && board[a][b+1]!='#' && dist[a][b+1]==-1){
				q.push(a);
				q.push(b+1);
				dist[a][b+1]=dist[a][b]+1;
			}
			if(board[(a+1)%2][b]!='#' && dist[(a+1)%2][b]==-1){
				q.push((a+1)%2);
				q.push(b);
				dist[(a+1)%2][b]=dist[a][b]+1;
			}
		}
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PathGameDiv2 *obj;
	int answer;
	obj = new PathGameDiv2();
	clock_t startTime = clock();
	answer = obj->calc(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"#....","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"#","."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".","."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"....#.##.....#...........","..#......#.......#..#...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
