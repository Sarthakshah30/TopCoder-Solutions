#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;


class TrafficMonitor {
public:
	vector< pair<int,int> > degree;
	bool visited[51];
	vector <string> links;
	
	int getMin(vector <string> links) {
		
		int count=0;
		int totaldegree=0;
		this->links=links;
		
		memset(visited,false,sizeof(visited));
		for(int i = 0 ; i<links.size() ;i++){
			if(!visited[i]){
				bfs(i);
			}
		}
		
		for(int i = 0 ; i<links.size() ;i++)
		totaldegree+=degree[i].first;
		
		
		bool visited1[links.size()][links.size()];
		memset(visited1,false,sizeof(visited1));
		
		sort(degree.rbegin(),degree.rend());
		
		for(int i = 0 ;i<links.size() ;i++)
		cout<<degree[i].second<<" "<<degree[i].first<<endl;
		
		for(int i = 0 ; i<degree.size() ; i++){
			if(totaldegree<=0)
			break;
			int x = degree[i].second;
			bool flag=false;
			
			for(int i = 0 ; i<links.size() ;i++){
				if(!visited1[x][i] && !visited1[i][x] && links[x][i]=='Y')
				{
					totaldegree-=2;
					visited1[x][i]=true;
					visited1[i][x]=true;
					flag=true;
				}
			}
			
			if(flag)
			count++;
		}
		return count;
	}
	
	void bfs(int src){
		queue<int> q;
		q.push(src);
		while(!q.empty()){
			int x = q.front();	q.pop();
			visited[x]=true;
			int count=0;
			for(int i = 0 ; i <links.size() ; i++){
				if(links[x][i]=='N')
				continue;
				count++;
				if(!visited[i]){
					q.push(i);
					visited[i]=true;
				}
			}
			degree.push_back(make_pair(count,x));
		}
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TrafficMonitor *obj;
	int answer;
	obj = new TrafficMonitor();
	clock_t startTime = clock();
	answer = obj->getMin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"NN","NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYNN","YNYN","NYNY","NNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[]=		{"NYYNNNNNNNNNNNN", "YNNYYNNNNNNNNNN", "YNNNNYYNNNNNNNN", "NYNNNNNYYNNNNNN", "NYNNNNNNNYYNNNN", "NNYNNNNNNNNYYNN", "NNYNNNNNNNNNNYY", "NNNYNNNNNNNNNNN", "NNNYNNNNNNNNNNN", "NNNNYNNNNNNNNNN", "NNNNYNNNNNNNNNN", "NNNNNYNNNNNNNNN", "NNNNNYNNNNNNNNN", "NNNNNNYNNNNNNNN", "NNNNNNYNNNNNNNN"};		
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 22;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
