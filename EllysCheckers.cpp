n#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;


class EllysCheckers {
public:
	map< pair<int,int> ,int> mymap;
	map< pair<int,int> ,int>::iterator it;
	
	string getWinner(string board) {
		if(possible(board,1)==1)
		return "YES";
		else
		return "NO";
	}
	
	int possible(string board,int turn){
		board[board.size()-1]='.';
		it=mymap.find(make_pair(board,turn));
		if(it!=mymap.end())
		return mymap[make_pair(board,turn)];
		
		int res;
		if(turn==0)
		res=1;
		else
		res=0;
		bool flag=false;
		for(int i = 0 ;i<board.size();i++){
			if(board[i]=='o'){
				
				if(i+1<board.size() && board[i+1]=='.'){
					flag=true;
					string temp=board;
					temp[i]='.';
					temp[i+1]='o';
					if(turn==0)
					res=res & possible(temp,1);
					else
					res=res | possible(temp,0);
				}
				if(i+3<board.size() && board[i+3]=='.' && board[i+1]=='o' && board[i+2]=='o'){
					flag=true;
					string temp=board;
					temp[i]='.';
					temp[i+3]='o';
					if(turn==0)
					res=res & possible(temp,1);
					else
					res=res | possible(temp,0);					
				}
			}
		}
		if(!flag){
			if(turn==0)
			res=1;
			else
			res=0;
		}
		mymap[make_pair(board,turn)]=res;
		return res;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	EllysCheckers *obj;
	string answer;
	obj = new EllysCheckers();
	clock_t startTime = clock();
	answer = obj->getWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;

	
	{
	// ----- test 3 -----
	p0 = "oooooo..oo.oo..ooooo";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
