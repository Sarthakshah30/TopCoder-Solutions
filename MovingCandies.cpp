#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define inf 9999
#include<cstring>
int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};
using namespace std;


class MovingCandies {
public:
	int row,col,hashes;
	int dp[20][20][400][400];
	vector <string> t;
	int minMoved(vector <string> t) {
		row=t.size();
		col=t[0].size();
		this->t=t;
		hashes=0;
		for(int i = 0 ; i<t.size() ; i++){
			for(int j = 0 ; j<t[0].size() ;j++)
			if(t[i][j]=='#')
			hashes++;
		}
		memset(dp,-1,sizeof(dp));
		int x=calculate(0,0,0,0);
		if(x>=inf)
		return -1;
		else
		return x;
	}
	
	int calculate(int x,int y,int used,int needed){
		if(used+needed>hashes)
		return inf;
		if(x==row-1 && y==col-1){
			if(t[x][y]=='#')
			used++;
			else
			needed++;
			if(needed+used > hashes)
			return inf;
			else
			return needed;
		}
		
		int minimum = inf;
		
		if(dp[x][y][used][needed]!=-1)
		return dp[x][y][used][needed];
		
		for(int i = 0 ;i<4 ; i++){
			int a = x+dx[i];
			int b = y+dy[i];
			if(a<row && a>=0 && b<col && b>=0){
				int local;
				if(t[x][y]=='#')
				local=calculate(a,b,used+1,needed);
				else
				local=calculate(a,b,used,needed+1);
				
				if(local<minimum)
				minimum=local;
			}
		}
		
		return dp[x][y][used][needed]=minimum;
	}
	
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MovingCandies *obj;
	int answer;
	obj = new MovingCandies();
	clock_t startTime = clock();
	answer = obj->minMoved(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"#...###","#...#.#","##..#.#",".#....#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"#...###","#...#.#","##..###",".#....#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".#..","##..","..#.","..#.","..##","..##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".....",".###.","####.","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".#...#.###.#","#.#.##......",".#.#......#.","..#.......#.","##.........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"###.#########..#####",".#######.###########"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"..",".."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
