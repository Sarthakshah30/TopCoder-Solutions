#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define red 0
#define green 1
#define blue 2
using namespace std;


class RGBStreet {
public:
	int estimateCost(vector <string> houses) {
		int n = houses.size();
		int dp[n+1][3];
		int costs[n][3];
		for(int j = 0 ; j<n ;j++){
			string temp = houses[j];
			reverse(temp.begin(),temp.end());
			int i,num1=0,num2=0,num3=0;
			for(i = temp.size()-1 ; temp[i]!=' ' ;i--){
				num1=(num1*10)+(temp[i]-'0');
			}
			for(i=i-1 ; temp[i]!=' ' ;i--){
				num2=(num2*10)+(temp[i]-'0');
			}
			for(i=i-1 ; i>=0 ;i--){
				num3=(num3*10)+(temp[i]-'0');
			}
			costs[j][0]=num1;
			costs[j][1]=num2;
			costs[j][2]=num3;
		}
		dp[n][0]=0;
		dp[n][1]=0;
		dp[n][2]=0;
		for(int i = n-1 ;i>=0 ;i--){
			for(int j = 0 ; j<3 ;j++){
				if(j==0){
					dp[i][j]=min(costs[i][1]+dp[i+1][1],costs[i][2]+dp[i+1][2]);
				}
				else if(j==1){
					dp[i][j]=min(costs[i][0]+dp[i+1][0],costs[i][2]+dp[i+1][2]);						
				}
				else{
					dp[i][j]=min(costs[i][1]+dp[i+1][1],costs[i][0]+dp[i+1][0]);						
				}
			}
		}
		return min(dp[0][0],min(dp[0][1],dp[0][2]));
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RGBStreet *obj;
	int answer;
	obj = new RGBStreet();
	clock_t startTime = clock();
	answer = obj->estimateCost(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 1 -----
	string t0[] = {"1 100 100","100 100 100","1 100 100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 102;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	
	{
	// ----- test 0 -----
	string t0[] = {"1 100 100","100 1 100","100 100 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"26 40 83","49 60 57","13 89 99"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 96;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"30 19 5","64 77 64","15 19 97","4 71 57","90 86 84","93 32 91"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 208;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"71 39 44","32 83 55","51 37 63","89 29 100","83 58 11","65 13 15","47 25 29","60 66 19"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 253;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
