#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LittleElephantAndString {
public:
	int getNumber(string A, string B) {
		
		if(check(A,B))
		return -1;
		if(A.compare(B)==0)
		return 0;
		
		for(int i = 1 ; i<A.size() ; i++){
			string temp=B.substr(i,B.size()-i);
			int j=0,k=0;
			for(;j<temp.size() ;){
				if(temp[j]==A[k]){
					j++;
					k++;
				}
				else
				k++;
				if(k==A.size())
				break;
			}
			if(j==temp.size())
			return i;
		}
		
		return A.size();
	}
	
	bool check(string temp1,string temp2){
		
		sort(temp1.begin(),temp1.end());
		sort(temp2.begin(),temp2.end());
		if(temp1.compare(temp2)!=0)
		return true;
		return false;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	LittleElephantAndString *obj;
	int answer;
	obj = new LittleElephantAndString();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	int p2;
	
	{
	// ----- test 3 -----
	p0 = "HQGHUMEAYLNLFDXFIRCVSCXGGBWKFNQDUXWFNFOZVS";
	p1 = "HEHNSYIDXDNAOWFNXVQQUMLZKVWBXGRLCFFUGSFGFC";
	p2 = 25;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
